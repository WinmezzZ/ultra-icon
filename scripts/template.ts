import { jsxExpressionContainer, stringLiteral } from '@babel/types';
import { jsxAttribute } from '@babel/types';
import { identifier, jsxClosingElement, jsxElement, jsxIdentifier, jsxOpeningElement } from '@babel/types';
import { transform } from '@svgr/core';

type Template = NonNullable<Parameters<typeof transform>['1']>['template'];

const template: Template = ({ imports, interfaces, componentName, props, jsx, exports }, { tpl }) => {
  jsx.openingElement.attributes.push(
    ...[
      jsxAttribute(jsxIdentifier('width'), jsxExpressionContainer(identifier('size'))),
      jsxAttribute(jsxIdentifier('height'), jsxExpressionContainer(identifier('size'))),
    ],
  );
  const wrappedJsx = jsxElement(
    jsxOpeningElement(jsxIdentifier('span'), [
      jsxAttribute(jsxIdentifier('css'), jsxExpressionContainer(identifier('iconStyle'))),
      jsxAttribute(jsxIdentifier('className'), stringLiteral('ultra-icon')),
    ]),
    jsxClosingElement(jsxIdentifier('span')),
    [jsx],
    false,
  );

  return tpl`
/**
 * These code auto generated by UltraIcon
 */

 /** @jsx jsx */
 import { jsx } from '@emotion/react';
 import { SVGProps } from 'react';
import PropTypes from 'prop-types';
import iconStyle from '../styles';
import merge from '../utils/merge';

interface SVGComponentProps extends SVGProps<SVGSVGElement> {
  size?: number | string;
};

const defaultProps = {
  size: 24
}

const ${componentName} = (p: SVGComponentProps) => {
  const { size, ...props } = merge(defaultProps, p);

  return ${wrappedJsx};
};

${componentName}.propTypes = {
  size: PropTypes.number,
};

${exports};

  `;
};

export default template;
