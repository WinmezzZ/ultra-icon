import { callExpression, stringLiteral } from '@babel/types';
import { jsxExpressionContainer } from '@babel/types';
import { expressionStatement } from '@babel/types';
import { jsxAttribute } from '@babel/types';
import {
  identifier,
  tsTypeAnnotation,
  tsTypeReference,
  tsTypeParameterInstantiation,
  jsxClosingElement,
  jsxElement,
  jsxIdentifier,
  jsxOpeningElement,
  jsxOpeningFragment,
  jsxClosingFragment,
  jsxSpreadAttribute,
  jsxSpreadChild,
  jsxFragment,
  react,
} from '@babel/types';

const template: any = ({ imports, interfaces, componentName, props, jsx, exports }: any, { tpl }: any) => {
  const wrappedJsx = jsxElement(
    jsxOpeningElement(jsxIdentifier('span'), [
      jsxAttribute(jsxIdentifier('css'), jsxExpressionContainer(identifier('iconStyle'))),
    ]),
    jsxClosingElement(jsxIdentifier('span')),
    (react.buildChildren as any)(jsx),
    false,
  );

  return tpl`
/**
 * These code auto generated by UltraIcon
 */

 /** @jsx jsx */
 import { jsx } from '@emotion/react';
 import { SVGProps } from 'react';
import PropTypes from 'prop-types';
import iconStyle from '../styles';

const ${componentName} = (${props}) => {
  return ${wrappedJsx}
};

${componentName}.propTypes = {
  size: PropTypes.number,
};

${exports};

  `;
};

export default template;
